{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"lmer(MeanCurr ~ Condition * prevCond * Trial + (Condition * prevCond | \n    Subject) + (1 | Electrode:Subject), data = SlowWave.correct)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval.parent(mc)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(expr, p)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(expr, envir, enclos)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"lme4::lmer(formula = MeanCurr ~ Condition * prevCond * Trial + \n    (Condition * prevCond | Subject) + (1 | Electrode:Subject), \n    data = SlowWave.correct)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"optimizeLmer(devfun, optimizer = control$optimizer, restart_edge = control$restart_edge, \n    boundary.tol = control$boundary.tol, control = control$optCtrl, \n    verbose = verbose, start = start, calc.derivs = control$calc.derivs, \n    use.last.params = control$use.last.params)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"optwrap(optimizer, devfun, getStart(start, rho$lower, rho$pp), \n    lower = rho$lower, control = control, adj = FALSE, verbose = verbose, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withCallingHandlers(do.call(optfun, arglist), warning = function(w) {\n    curWarnings <<- append(curWarnings, list(w$message))\n})","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"do.call(optfun, arglist)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (par, fn, lower = -Inf, upper = Inf, control = list(), \n    ...) \n{\n    nn <- names(par) ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (x) \n{\n    names(x) <- nn\n    fn(x, ...) ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fn(x, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"pp$ptr","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"pp$ptr","line_number":0}],"message":"Error in forPlotting$TrialCondition = c(\"Previous compatible - Current compatible\",  : \n  object 'forPlotting' not found\n"}